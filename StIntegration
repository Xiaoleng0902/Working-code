import os
import  re
from tqdm import tqdm
import pandas as pd
import scanpy as sc


class StIntegration():
    def __init__(self, root_path):
        self.root_path = root_path

    def ST_count_txt_path(self):
        all_path = []
        for i in os.listdir(self.root_path):
            cancer_type = re.findall(r"\D*", i)[0]
            if cancer_type == "gbm":
                slices = os.listdir(os.path.join(self.root_path, i))
                slices_path = os.path.join(self.root_path, i)
                for slice in slices:
                    if re.findall(r"\.*ST_count", slice):
                        path = os.path.join(slices_path, slice)

                        all_path.append(path)
        return all_path

    def Read_data(self, data_path_list):
        adata0= sc.read_text(data_path_list[0])
        adata0.obs_names_make_unique()
        adata1 = sc.read_text(data_path_list[1])
        adata1.obs_names_make_unique()
        adata2 = sc.read_text(data_path_list[2])
        adata2.obs_names_make_unique()
        adata3 = sc.read_text(data_path_list[3])
        adata3.obs_names_make_unique()
        adata4 = sc.read_text(data_path_list[4])
        adata4.obs_names_make_unique()
        adata5 = sc.read_text(data_path_list[5])
        adata5.obs_names_make_unique()
        adata6 = sc.read_text(data_path_list[6])
        adata6.obs_names_make_unique()
        adata7= sc.read_text(data_path_list[7])
        adata7.obs_names_make_unique()
        adata8= sc.read_text(data_path_list[8])
        adata8.obs_names_make_unique()
        adata9= sc.read_text(data_path_list[9])
        adata9.obs_names_make_unique()
        adata10 = sc.read_text(data_path_list[10])
        adata10.obs_names_make_unique()
        adata11= sc.read_text(data_path_list[11])
        adata11.obs_names_make_unique()
        adata12= sc.read_text(data_path_list[12])
        adata12.obs_names_make_unique()
        adata13= sc.read_text(data_path_list[13])
        adata13.obs_names_make_unique()
        adata14= sc.read_text(data_path_list[14])
        adata14.obs_names_make_unique()
        adata15 = sc.read_text(data_path_list[15])
        adata15.obs_names_make_unique()
        adata16 = sc.read_text(data_path_list[16])
        adata16.obs_names_make_unique()
        adata17 = sc.read_text(data_path_list[17])
        adata17.obs_names_make_unique()
        adata18 = sc.read_text(data_path_list[18])
        adata18.obs_names_make_unique()
        adata19 = sc.read_text(data_path_list[19])
        adata19.obs_names_make_unique()
        adata20 = sc.read_text(data_path_list[20])
        adata20.obs_names_make_unique()
        adata21 = sc.read_text(data_path_list[21])
        adata21.obs_names_make_unique()
        adata22 = sc.read_text(data_path_list[22])
        adata22.obs_names_make_unique()
        adata23 = sc.read_text(data_path_list[23])
        adata23.obs_names_make_unique()
        adata24 = sc.read_text(data_path_list[24])
        adata24.obs_names_make_unique()
        adata25 = sc.read_text(data_path_list[25])
        adata25.obs_names_make_unique()
        adata=sc.AnnData.concatenate(adata0,adata1
                                    )
        return  adata
if __name__ == '__main__':
    St = StIntegration(root_path=r"H:\Toolkit\Mirror\ST_analysis\data\10X Visium\1ROGUE")
    path_list = St.ST_count_txt_path()
    print(path_list)
    adata=St.Read_data(data_path_list=path_list)
    adata.obs["batch"].value_counts()
    sc.pp.normalize_total(adata, target_sum=1e4)
    sc.pp.log1p(adata)
    adata.raw = adata
    sc.pp.highly_variable_genes(adata, batch_key='batch', subset=True)

    # %%
    sc.pp.scale(adata, max_value=10)
    sc.tl.pca(adata)
    sc.pp.neighbors(adata)
    sc.tl.umap(adata)
    sc.pl.umap(adata, color="batch")
